package com.example.demo.services;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.demo.dtos.CompleteProfileRequest;
import com.example.demo.dtos.ProfileResponse;
import com.example.demo.entities.User;
import com.example.demo.repositories.UserRepository;
import lombok.RequiredArgsConstructor;
import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class ProfileService {
    
    private final UserRepository userRepository;
    
    @Transactional
    public ProfileResponse completeProfile(String email, CompleteProfileRequest request) {
        // Récupérer l'utilisateur
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        // Vérifier si le profil n'est pas déjà complété
        if (user.getIsProfileCompleted()) {
            throw new RuntimeException("Profile already completed");
        }
        
        // Mettre à jour les informations
        user.setPhoneNumber(request.getPhoneNumber());
        user.setAddress(request.getAddress());
        user.setCity(request.getCity());
        user.setCountry(request.getCountry());
        user.setIsProfileCompleted(true);
        user.setProfileCompletedAt(LocalDateTime.now());
        
        // Sauvegarder
        user = userRepository.save(user);
        
        // Retourner la réponse
        return mapToProfileResponse(user);
    }
    
    public ProfileResponse getProfile(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        return mapToProfileResponse(user);
    }
    
    @Transactional
    public ProfileResponse updateProfile(String email, CompleteProfileRequest request) {
        // Récupérer l'utilisateur
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        // Mettre à jour les informations
        user.setPhoneNumber(request.getPhoneNumber());
        user.setAddress(request.getAddress());
        user.setCity(request.getCity());
        user.setPostalCode(request.getPostalCode());
        
        // Vérifier si le profil est maintenant complet
        if (user.canMarkProfileAsCompleted() && !user.getIsProfileCompleted()) {
            user.setIsProfileCompleted(true);
            user.setProfileCompletedAt(LocalDateTime.now());
        }
        
        // Sauvegarder
        user = userRepository.save(user);
        
        return mapToProfileResponse(user);
    }
    
    private ProfileResponse mapToProfileResponse(User user) {
        ProfileResponse response = new ProfileResponse();
        response.setId(user.getId());
        response.setName(user.getName());
        response.setEmail(user.getEmail());
        response.setPhoneNumber(user.getPhoneNumber());
        response.setAddress(user.getAddress());
        response.setCity(user.getCity());
        response.setCountry(user.getCountry());
        response.setIsProfileCompleted(user.getIsProfileCompleted());
        return response;
    }
}